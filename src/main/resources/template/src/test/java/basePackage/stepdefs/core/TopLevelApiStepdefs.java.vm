package ${basePackage}.stepdefs.core.${apiNameLowercase}${scenarioNumber};

import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lombok.extern.slf4j.Slf4j;
import ${basePackage}.stepdefs.${capitalizedApiName}${scenarioNumber}Stepdefs;

/**
 * Created : ${createTimestamp}
 *
 * DO NOT CHANGE THIS FILE or IT WILL GET OVERRIDDEN
 */

@Slf4j
public class _${capitalizedApiName}${scenarioNumber}Stepdefs extends ${capitalizedApiName}${scenarioNumber}Stepdefs {

    @Given("^\"([^\"]*)\" is up and running$")
    public void _isUpAndRunning(String apiName) {
        apiBeforeInit();
        scenarioBeforeInit();
        init();
        scenarioAfterInit();
        apiAfterInit();

        apiBeforeIsUpAndRunning();
        scenarioBeforeIsUpAndRunning();
        isUpAndRunning(apiName);
        scenarioAfterIsUpAndRunning();
        apiAfterIsUpAndRunning();
    }

    @Given("^\"([^\"]*)\" is up and running at \"([^\"]*)\" on port \"([^\"]*)\" over protocol \"([^\"]*)\"$")
    public void _isUpAndRunningAtOnPortOverProtocol(String apiName, String host, int port, String protocol) {
        apiBeforeInit();
        scenarioBeforeInit();
        init();
        scenarioAfterInit();
        apiAfterInit();

        apiBeforeIsUpAndRunning();
        scenarioBeforeIsUpAndRunning();
        isUpAndRunningAtOnPortOverProtocol(apiName, host, port, protocol);
        scenarioAfterIsUpAndRunning();
        apiAfterIsUpAndRunning();
    }

    @And("^I prepare scenario number \"([^\"]*)\" in group \"([^\"]*)\"$")
    public void _iPrepareScenarioNumberInGroup(int scenarioNumebr, String groupName) {
        apiBeforeIPrepareScenarioNumberInGroup();
        scenarioBeforeIPrepareScenarioNumberInGroup();
        iPrepareScenarioNumberInGroup(scenarioNumebr, groupName);
        scenarioAfterIPrepareScenarioNumberInGroup();
        apiAfterIPrepareScenarioNumberInGroup();
    }

    @And("^request has header with name \"([^\"]*)\" and value \"([^\"]*)\"$")
    public void _requestHasHeaderWithNameAndValue(String headerName, String headerValue) {
        apiBeforeRequestHasHeaderWithNameAndValue();
        scenarioBeforeRequestHasHeaderWithNameAndValue();
        requestHasHeaderWithNameAndValue(headerName, headerValue);
        scenarioAfterRequestHasHeaderWithNameAndValue();
        apiAfterRequestHasHeaderWithNameAndValue();
    }

    @And("^path param \"([^\"]*)\" has value \"([^\"]*)\"$")
    public void _pathParamHasValue(String pathParamName, String pathParamValue) {
        apiBeforePathParamHasValue();
        scenarioBeforePathParamHasValue();
        pathParamHasValue(pathParamName, pathParamValue);
        scenarioAfterPathParamHasValue();
        apiAfterPathParamHasValue();
    }

    @And("^has a query param with name \"([^\"]*)\" and value \"([^\"]*)\"$")
    public void _hasAQueryParamWithNameAndValue(String queryParamName, String queryParamValue) {
        apiBeforeHasAQueryParamWithNameAndValue();
        scenarioBeforeHasAQueryParamWithNameAndValue();
        hasAQueryParamWithNameAndValue(queryParamName, queryParamValue);
        scenarioAfterHasAQueryParamWithNameAndValue();
        apiAfterHasAQueryParamWithNameAndValue();
    }

    @And("^endpoint consumes \"([^\"]*)\"$")
    public void _endpointConsumes(String consumes) {
        apiBeforeEndpointConsumes();
        scenarioBeforeEndpointConsumes();
        endpointConsumes(consumes);
        scenarioAfterEndpointConsumes();
        apiAfterEndpointConsumes();
    }

    @And("^endpoint produces \"([^\"]*)\"$")
    public void _endpointProduces(String produces) {
        apiBeforeEndpointProduces();
        scenarioBeforeEndpointProduces();
        endpointProduces(produces);
        scenarioAfterEndpointProduces();
        apiAfterEndpointProduces();
    }

    @When("^I make a \"([^\"]*)\" request to path \"([^\"]*)\"$")
    public void _iMakeARequestToPath(String requestMethod, String contextPath) throws Throwable {
        apiBeforeIMakeARequestToPath();
        scenarioBeforeIMakeARequestToPath();
        iMakeARequestToPath(requestMethod, contextPath);
        scenarioAfterIMakeARequestToPath();
        apiAfterIMakeARequestToPath();
    }

    @Then("^I should get a response with http status code \"([^\"]*)\"$")
    public void _iShouldGetAResponseWithHttpStatusCode(int responseStatus) {
        apiBeforeIShouldGetAResponseWithHttpStatusCode();
        scenarioBeforeIShouldGetAResponseWithHttpStatusCode();
        iShouldGetAResponseWithHttpStatusCode(responseStatus);
        scenarioAfterIShouldGetAResponseWithHttpStatusCode();
        apiAfterIShouldGetAResponseWithHttpStatusCode();
    }

    @And("^I should get a response body$")
    public void _iShouldGetAResponseBody() {
        apiBeforeIShouldGetAResponseBody();
        scenarioBeforeIShouldGetAResponseBody();
        iShouldGetAResponseBody();
        scenarioAfterIShouldGetAResponseBody();
        apiAfterIShouldGetAResponseBody();
    }
}
